<!--
  MICHIGAN STATE UNIVERSITY HEALTH INFORMATION TECHNOLOGY
  
  FILE: build.xml
  
  Sample ANT build.xml file for a simple web application.
-->
<project name="Simple Web Application" default="help" basedir=".">

<!-- ======= properties ======= -->

  <property name="app.name"      value="webapp2"/>
  <property name="app.path"      value="/${app.name}"/>
  <property name="app.version"   value="0.1-dev"/>
  <property name="build.home"    value="${basedir}/build"/>
  <property name="dist.home"     value="${basedir}/dist"/>
  <property name="docs.home"     value="${basedir}/docs"/>
  <property name="src.home"      value="${basedir}/src/main/java"/>
  <property name="web.home"      value="${basedir}/src/main/webapp"/>
  <property name="jetty.home"    value="/home/richs/bin/jetty" />

<!-- ==================== External Dependencies =========================== -->


<!--

  Use property values to define the locations of external JAR files on which
  your application will depend.  In general, these values will be used for
  two purposes:
  * Inclusion on the classpath that is passed to the Javac compiler
  * Being copied into the "/WEB-INF/lib" directory during execution
    of the "deploy" target.

  Because we will automatically include all of the Java classes that Tomcat
  exposes to web applications, we will not need to explicitly list any of those
  dependencies.  You only need to worry about external dependencies for JAR
  files that you are going to include inside your "/WEB-INF/lib" directory.

-->

<!-- Dummy external dependency -->
<!--
  <property name="foo.jar"
           value="/path/to/foo.jar"/>
-->


<!-- ==================== Compilation Classpath =========================== -->

<!--

  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.  The example below constructs the compile
  classpath to include the servlet.jar file, as well as the other components
  that Tomcat makes available to web applications automatically, plus anything
  that you explicitly added.

-->

  <path id="compile.classpath">

    <!-- Include all JAR files that will be included in /WEB-INF/lib -->
    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
<!--
    <pathelement location="${foo.jar}"/>
-->

    <!-- Include all elements that Jetty exposes to applications -->
<!--
    <fileset dir="${catalina.home}/bin">
      <include name="*.jar"/>
    </fileset>
-->
    <pathelement location="${jetty.home}/lib"/>
    <fileset dir="${jetty.home}/lib">
      <include name="*.jar"/>
    </fileset>

  </path>    


<!--  ======= Compilation Control Options ======= -->

<!--

  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?

  compile.deprecation  Should compilation include the deprecation option?

-->

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="false"/>

<!-- 
  The folowing was added after getting this warning message:
  
    warning: 'includeantruntime' was not set, defaulting to 
    build.sysclasspath=last; set to false for repeatable builds
-->  
  <presetdef name="hit.javac">
    <javac includeantruntime="false" />
  </presetdef>

<!-- ======= help target ======= -->

  <target name="help"
    description="Provide usage help for this build file.">
  <echo>
    dist.home: ${dist.home}
    docs.home: ${docs.home}
    src.home:  ${src.home}
    web.home:  ${web.home}
    ------------------------------
    app.name: ${app.name}
    app.path: ${app.path}
    app.version = ${app.version}
    ------------------------------
    compile control options:
    compile.debug: ${compile.debug}
    compile.deprecation: ${compile.deprecation}
  </echo>  
    
  </target>


<!-- ======= Clean Target ======= -->

<!--

  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

-->

  <target name="clean"
   description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
    <delete dir="${dist.home}"/>
  </target>
  
  
<!-- ======= create target ======= -->

<!--

  The "create" target is used to create the project source directories
  and copy any standard static files from external sources.
  
  This is the first target to be executed when starting an new 
  application. It should only be executed once.
  
-->

  <target name="create"
    description="Create the application directories.">

    <!-- Create build directories as needed -->
    <mkdir dir="${web.home}"/>
    <mkdir dir="${web.home}/WEB-INF"/>
    <mkdir dir="${web.home}/WEB-INF/classes"/>
    
    <!-- directories for Angular application -->
    <mkdir dir="${web.home}/css" />
    <mkdir dir="${web.home}/js" />
    <mkdir dir="${web.home}/js/controllers" />
    <mkdir dir="${web.home}/js/directives" />
    <mkdir dir="${web.home}/js/filters" />
    <mkdir dir="${web.home}/js/resources" />
    <mkdir dir="${web.home}/js/services" />
    <mkdir dir="${web.home}/js/vendor"/>
    
    <!-- Java source and documentation directories -->
    <mkdir dir="${src.home}" />
    <mkdir dir="${docs.home}" />

    <!-- Copy static files from external dependencies as needed -->
    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->

  </target>


<!-- ======= prepare target ======= -->

<!--

  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.
  
-->  

  <target name="prepare"
    description="Create build destication directory.">

    <!-- Create build directories as needed -->
    <mkdir dir="${build.home}"/>
    <mkdir dir="${build.home}/WEB-INF"/>
    <mkdir dir="${build.home}/WEB-INF/classes"/>

    <!-- Copy static content of this web application -->
    <copy todir="${build.home}">
      <fileset dir="${web.home}"/>
    </copy>

    <!-- Copy static files from external dependencies as needed -->
    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
  </target>
  

<!-- ======= Compile Target ======= -->

<!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".

-->

  <target name="compile" depends="prepare"
   description="Compile Java sources">

    <!-- Compile Java classes as necessary -->
    <mkdir    dir="${build.home}/WEB-INF/classes"/>
    <hit.javac srcdir="${src.home}"
          destdir="${build.home}/WEB-INF/classes"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}">
      <classpath refid="compile.classpath"/>
    </hit.javac>

    <!-- Copy application resources -->
    <copy  todir="${build.home}/WEB-INF/classes">
      <fileset dir="${src.home}" excludes="**/*.java"/>
    </copy>

  </target>


<!-- ======= Dist Target ======= -->

<!--

  The "dist" target creates a binary distribution of your application
  in a directory structure ready to be archived in a tar.gz or zip file.
  Note that this target depends on two others:

  * "compile" so that the entire web application (including external
    dependencies) will have been assembled

  * "javadoc" so that the application Javadocs will have been created

-->

  <target name="dist" depends="compile"
   description="Create binary distribution">

    <!-- Copy documentation subdirectories -->
    <mkdir   dir="${dist.home}/docs"/>
    <copy    todir="${dist.home}/docs">
      <fileset dir="${docs.home}"/>
    </copy>

    <!-- Create application WAR file -->
    <jar jarfile="${dist.home}/${app.name}-${app.version}.war"
         basedir="${build.home}"/>

    <!-- Copy additional files to ${dist.home} as necessary -->

  </target>
    

<!-- ======= Run Target ======= -->

<!-- 

    The "run" target runs the war application under jetty-runner
    
-->

    <target name = "run" depends="dist"
     description="Run the war application with jetty-runner">
     
        <java
            dir="${jetty.home}"
            jar="${jetty.home}/bin/jetty-runner.jar"
            fork="true">
            <arg value="${dist.home}/${app.name}-${app.version}.war" />
        </java>
        
     </target>


<!-- ======= deploy Target ======= -->

<!-- 

    The "deploy" target copys the war application to webapps directory
    
-->

    <target name = "deploy" depends="dist"
     description="Deploy the war application to webapps directory">
     
        <copy 
            file="${dist.home}/${app.name}-${app.version}.war"
            tofile="${jetty.home}/webapps/${app.name}.war">
        </copy>
        
     </target>
</project>
